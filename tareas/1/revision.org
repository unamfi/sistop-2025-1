** Omar Aguirre y Mar√≠a Mart√≠nez
- Problema resuelto :: El elevador
- Documentaci√≥n :: [[./AguirreOmar_Mart√≠nezMar√≠a/421032167_318071280.pdf][421032167_318071280.pdf]], [[./AguirreOmar_Mart√≠nezMar√≠a/ELEVADORFI_INTERFAZGRAFICA.mp4][ELEVADORFI_INTERFAZGRAFICA.mp4]]
- Archivos :: [[./AguirreOmar_Mart√≠nezMar√≠a/ELEVADORFI.txt][ELEVADORFI.txt]], [[./AguirreOmar_Mart√≠nezMar√≠a/ELEVADORFIINTERFAZ.txt][ELEVADORFIINTERFAZ.txt]]
- Comentarios ::
  - ¬°Aguas! ¬°Cada vez que le llaman /librer√≠a/ a una /biblioteca/, Dios mata a
    un gatito. ¬°Piensen en los gatitos! üôÅüêàüòæüòø
  - El c√≥digo que me entegan incluye dos archivos en Python, =ELEVADORFI.TXT= y
    =ELEVADORFIINTERFAZ.txt=. En la documentaci√≥n indican que se debe guardar
    con la interfaz =.py= y ejecutar =elevador.py=... Pero no indican cu√°l de
    los dos ejecutar.
    - Entiendo que el primero (no-gr√°fico) muestra el funcionamiento complejo,
      usando la capacidad m√°xima, y el segundo (gr√°fico) muestra la
      representaci√≥n visual. ¬°Pero tendr√≠an que detallar eso en su
      documentaci√≥n! Si les califico √∫nicamente una entrega, s√≠ o s√≠ me ‚Äúpierdo‚Äù
      de parte importante de la resoluci√≥n.
  - ¬°Bien por usar =Event=, que no cubrimos en clase!
    - Su uso no es muy eficaz, sin embargo: Dado que el elevador sube y baja,
      como bien apuntan, siguiendo un algoritmo =LOOK=... No le hace mayor caso
      a las llamadas (no se dirige hacia ellas). S√≥lo, claro, permite ahorrar
      energ√≠a cuando no hay ninguna llamada pendiente.
    - Incluso si va en el piso 3 (subiendo) y lo llaman del piso 2 para subir al
      3, llega hasta el tope del edificio, luego baja (el usuario sube mientras
      pasa bajando), llega hasta el 0, y vuelve a subir. Es correcto seg√∫n la
      implementaci√≥n, claro.
- Calificaci√≥n :: 10

** Gabriela Aquino
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./AquinoGabriela/README.md][README.md]], [[./AquinoGabriela/TAREA_1_AQUINO_LOZADA.pdf][TAREA_1_AQUINO_LOZADA.pdf]]
- Archivos :: [[./AquinoGabriela/alumno_asesor_AG.py][alumno_asesor_AG.py]]
- Comentarios ::
  - ¬øY ese archivo =README.md=? ¬°Hola, pues! üòâ
  - La resoluci√≥n est√° /mayormente/ bien. Pero como me planteas en tu /duda/,
    hay un punto por ah√≠ que no qued√≥ bien resuelto.
    - Sub√≠ el n√∫mero total de alumnos a 50, y termin√© con -26 sillas
      ocupadas. ¬°Guau!
    - Tus l√≠neas 35‚Äì49 dicen:
      #+begin_src python
	if num_sillas_ocupadas >= CAPACIDAD_SALON and not flag_entrado:
	    print(f"Alumno {id_alumno}: Sin espacio, esperar√© fuera. ")
	    mutex.release()
	    sem_duda.acquire()  # Espera hasta que pueda resolver la duda
	elif flag_entrado:
	    print(f"Alumno {id_alumno}: Esperando mi turno en el sal√≥n ")
	    mutex.release()
	    sem_duda.acquire()  # Espera para resolver otra duda
	else:
	    # Si hay espacio, entra
	    flag_entrado = True
	    num_sillas_ocupadas += 1
	    print(f"\nAlumno {id_alumno}: Entra al sal√≥n. Sillas ocupadas: {num_sillas_ocupadas}")
	    mutex.release()
      #+end_src
      Entonces, √∫nicamente haces =num_sillas_ocupadas +=1= cuando s√≠ hay sillas
      libres. Pero si te quedas a /esperar tu turno en el sal√≥n/, igual vas a
      plantear tu pregunta, y cuando llegues a la l√≠nea 64, vas a hacer
      =num_sillas_ocupadas -=1=.
    - Probablemente habr√≠a sido m√°s f√°cil que emplearas un /Multiplex/ del
      tama√±o del n√∫mero de sillas que tuvieras... Te ahorrar√≠as el condicional,
      y el conteo respecto a cu√°ntos hay o no.
- Calificaci√≥n :: 8

** Esteban Arellanes y Christian Esquivel
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./ArellanesEsteban-EsquivelChristian/ArellanesEsteban_EsquivelChristian_Tarea1.txt][ArellanesEsteban_EsquivelChristian_Tarea1.txt]]
- Archivos :: [[./ArellanesEsteban-EsquivelChristian/ArellanesEsteban_EsquivelChristian_Tarea1.py][ArellanesEsteban_EsquivelChristian_Tarea1.py]]
- Comentarios ::
  - Buena resoluci√≥n üòÉ
    - ¬°Muy bien por usar una VC! üòÉ
  - Normalmente, al t√©rmino de un ciclo anual comenzamos a planear el otro. Esto
    es, cuando vuelve de entregar los regalos, los elfos est√°n ya de nuevo
    trabajando en las preparaciones para el a√±o entrante, y los renos ya est√°n
    comprando sus boletos para el Caribe.
- Calificaci√≥n :: 10

** Nancy Bohorquez
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./BohorquezNancy/Tarea1_BohorquezNancy.pdf][Tarea1_BohorquezNancy.pdf]]
- Archivos :: [[./BohorquezNancy/AlumnosYAsesor.py][AlumnosYAsesor.py]]
- Comentarios ::
  - No me fue posible ejecutar tu c√≥digo ‚òπ Los estudiantes se apanican y se van
    a excepci√≥n ni bien son creados
    #+begin_src text
      $ python3 AlumnosYAsesor.py 
      Exception in thread Thread-2 (Estudiante):
      Traceback (most recent call last):
        File "/usr/lib/python3.12/threading.py", line 1075, in _bootstrap_inner
      Exception in thread Thread-3 (Estudiante):
      Traceback (most recent call last):
        File "/usr/lib/python3.12/threading.py", line 1075, in _bootstrap_inner
      Exception in thread Thread-4 (Estudiante):
      Exception in thread Thread-5 (Estudiante):
      Traceback (most recent call last):
      Traceback (most recent call last):
      Exception in thread Thread-7 (Estudiante):
      Exception in thread Thread-6 (Estudiante):
      Traceback (most recent call last):
          self.run()
      (...)
    #+end_src
    - El m√©todo de inicializaci√≥n en Python, =.__init__()=, debe especificarse
      con /dos guiones bajos/ al inicio y al final (no con uno solo).
    - Corrigiendo este aspecto, el programa funciona correctamente. (¬øc√≥mo lo
      utilizaste t√∫ misma? ü§î)
  - Cuando tienes una duda y el profesor est√° ocupado, ¬øte rindes de inmediato y
    te vas, o te esperas a que se libere?
    - Claro, eres humana... tienes muchas m√°s variables que considerar üòâ
    - Pero me parece derrotista como hiciste (l√≠nea 24)
      #+begin_src python
	# Sentarse
	if not sillas_libres.acquire(timeout=1):
	    self.reporta('No hay sillas disponibles. Me voy.')
	    return
      #+end_src
      Si en vez de llamar con =timeout=1= simplemente te quedaras esperando a
      que se liberara la silla, los 15 alumnos tendr√≠an oportunidad de resolver
      sus dudas (aunque el profe tendr√≠a m√°s trabajo)
    - As√≠ como lo tienes, s√≥lo los 3 primeros estudiantes hacen su pregunta. Los
      otros se dan media vuelta y se van üò∞
    - aunque... ¬°Muy bien hecho por usar el =timeout= a pesar de que yo no se
      los ense√±ara! üòÉ
- Calificaci√≥n :: 8

** Victor Calderon y Brenda Flores
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./CalderonVictor-FloresBrenda/CalderonVictor-FloresBrenda.txt][CalderonVictor-FloresBrenda.txt]]
- Archivos :: [[./CalderonVictor-FloresBrenda/CalderonVictor-FloresBrenda.py][CalderonVictor-FloresBrenda.py]]
- Comentarios ::
  - ¬°Bonita implementaci√≥n! Cortita pero completa.
  - Es frecuente ver que alumnos (y programadores novatos) escriban los
    comentarios /a la derecha/ del c√≥digo al que se aplican. Esto, sin embargo,
    hace que el c√≥digo crezca demasiado en lo horizontal, y dificulta la
    lectura. Muchas l√≠neas como la siguiente resultan dif√≠ciles:
    #+begin_src python
      mutex_orden.release()  # Libera el lock para que otro alumno haga preguntas
      time.sleep(random.uniform(1, 3))  # Espera antes de hacer su pr√≥xima pregunta
      mutex_orden.acquire()  # Vuelve a adquirir el lock para su siguiente pregunta
    #+end_src
    - Est√°n comentando de m√°s (algunos de los comentarios son innecesarios,
      el comportamiento que describen resulta obvio del contexto
    - Pero incluso obviando esto, resulta mucho m√°s f√°cil de leer:
    #+begin_src python
      # Libera el lock para que otro alumno haga preguntas
      mutex_orden.release()
      # Espera antes de hacer su pr√≥xima pregunta
      time.sleep(random.uniform(1, 3))
      # Vuelve a adquirir el lock para su siguiente pregunta
      mutex_orden.acquire()
    #+end_src
- Calificaci√≥n :: 9

** Mauricio Cornejo
- Problema resuelto :: El elevador
- Documentaci√≥n :: [[./CornejoMauricio/Tarea1.txt][Tarea1.txt]]
- Archivos :: [[./CornejoMauricio/elevador.py][elevador.py]]
- Comentarios ::
  - No s√© qu√© editor est√©n usando, o c√≥mo es que esto les funcione... Pero eres
    el segundo alumno (y voy avanzando linealmente sobre esta lista) que me
    entrega c√≥digo de Python en que los nombres especiales (=__main__= o
    =__name__=) los escriben con √∫nicamente un gui√≥n bajo. ¬°Y eso no puede
    funcionar en ning√∫n lugar!
    - Pero corrigiendo ese detalle, el c√≥digo funciona correctamente...  ü§î
      ¬°Raro!
  - Ojo: El m√©todo constructor =__init__()= se /invoca impl√≠citamente/: En
    Python es habitual llamar a la clase directamente (y resulta m√°s limpio y
    f√°cil de leer). Entonces, donde llamas a =threading.Thread.__init__(self)=,
    podr√≠as llamar √∫nicamente a =threading.Thread(self)=.
    - Del mismo modo, =Thread().start()= tiene por comportamiento llamar a
      =run()= dentro del objeto creado.
  - El funcionamiento de tu elevador es correcto. ¬°Lo √∫nico es que van a ponerle
    una multa por excesivo gasto de energ√≠a! Incluso cuando no queda ya ning√∫n
    usuario en el sistema, el elevador se pasar√° el tiempo subiendo y bajando,
    abriendo la puerta en cada uno de los pisos üòï
- Calificaci√≥n :: 9

** Amir Cuevas y Fernando De La Rosa
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./CuevasAmir-DeLaRosaFernando/Tarea 1. Alumnos y el asesor.pdf][Tarea 1. Alumnos y el asesor.pdf]]
- Archivos :: [[./CuevasAmir-DeLaRosaFernando/Alumnos y Asesor/Asesor.java][Asesor.java]], [[./CuevasAmir-DeLaRosaFernando/Alumnos y Asesor/AsesorAlumnos.java][AsesorAlumnos.java]]
- Comentarios ::
  - ¬°Agradezco que cada alumno sea de otro color! As√≠ es m√°s f√°cil seguir la
    interacci√≥n.
  - No es habitual que encuentren c√≥mo modelar e ir mostrando que el asesor
    despierte y vuelva a dormir expl√≠citamente. ¬°Muy bien!
  - Aumentando el n√∫mero de alumnos, se presenta un caso raro: El asesor se va a
    dormir despu√©s de resolver una serie de preguntas, pero los siguientes
    alumnos que llegan reciben que ‚Äúla sala est√° llena‚Äù, cuando tendr√≠a que
    estar vac√≠a. ¬øPor qu√©?
    #+begin_src text
      Asesor: Respuesta a alumno 33, pregunta 2
      Alumno 31: Pregunta 3
      Asesor: Respuesta a alumno 31, pregunta 3
      Alumno 39: La sala est√° llena, me voy.
      Alumno 33: Pregunta 3
      Alumno 31: Termin√≥ sus preguntas, deja la silla.
      Asesor: Respuesta a alumno 33, pregunta 3
      Alumno 40: La sala est√° llena, me voy.
      Alumno 33: Termin√≥ sus preguntas, deja la silla.
      Asesor: Dormido, esperando estudiantes...
      Alumno 41: La sala est√° llena, me voy.
      Alumno 42: La sala est√° llena, me voy.
      Alumno 43: La sala est√° llena, me voy.
      Alumno 44: La sala est√° llena, me voy.
      Alumno 45: La sala est√° llena, me voy.
      Alumno 46: La sala est√° llena, me voy.
      Alumno 47: La sala est√° llena, me voy.
      Alumno 48: La sala est√° llena, me voy.
      Alumno 49: La sala est√° llena, me voy.
      Alumno 50: La sala est√° llena, me voy.
      Alumno 51: La sala est√° llena, me voy.
      Alumno 52: La sala est√° llena, me voy.
      Alumno 53: La sala est√° llena, me voy.
    #+end_src
    - Esto es, me parece, porque s√≥lo hacen =estudiantesEnSala.release()= para
      los alumnos que alcanzaron a entrar a la sala (l√≠nea 69) pero no
      alcanzaron silla (l√≠nea 71). Conforme entran m√°s alumnos, los primeros que
      entrarion dejaron a sus /fantasmas/ en la sala, y los √∫ltimos ya ni
      siquiera intentan entrar
  - No presentan ning√∫n mecanismo con el cual un estudiante que entr√≥ a la sala
    alcance a sentarse eventualmente. Lo sestudiantes que se quedan
    parados... √önicamente se van.
  - En ambos casos, si hubieran evitado el =tryAcquire()= y hubieran hecho un
    uso /tradicionalito/ de =acquire()= habr√≠a resultado correcto.
  - Cuando hacen programaci√≥n orientada a objetos, busquen cuidar que no haya
    /invasi√≥n de funciones/: No deber√≠a ocurrir nunca que el =Asesor= tome
    acciones aparentando ser el =Alumno= o viceversa. El c√≥digo que presentan
    mezcla dentro de la misma l√≥gica a alumnos y asesor. El mismo hilo imprime
    el estado del asesor y del alumno:
    #+begin_src java
      for (int j = 1; j <= 3; j++) {
          // Acceso exclusivo al profesor para hacer la pregunta
          mutex.acquire(); 
          System.out.println(color + "Alumno " + alumnoId + ": Pregunta " + j + "\u001B[0m");
          //System.out.println("Profesor: Alumno " + alumnoId + " mi respuesta a tu pregunta " + j + " es *bla bla*");
          // Aseguramos que el mensaje "Despierto, listo para atender..." se imprima antes de la respuesta
          if (!profesorDespierto) {
              System.out.println("Asesor: Despierto, listo para atender...");
              profesorDespierto = true; // El profesor ya est√° despierto
          }

          Thread.sleep(rand.nextInt(100)); // Simular el tiempo de pregunta
          System.out.println("Asesor: Respuesta a alumno " + alumnoId + ", pregunta " + j);
          mutex.release(); // Liberar acceso al profesor
    #+end_src
    Esto /no est√° propiamente mal/, pero hace mucho m√°s dif√≠cil entender la
    l√≥gica de lo implementado, separando responsabilidades.
- Calificaci√≥n :: 9

** Fernanda Garcia y Miriam Lopez
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./GarciaFernanda-LopezMiriam/Tarea1_GarciaFernanda_LopezMiriam.txt][Tarea1_GarciaFernanda_LopezMiriam.txt]]
- Archivos :: [[./GarciaFernanda-LopezMiriam/SantaClausP.java][SantaClausP.java]]
- Comentarios ::
  - ¬°Excelente que usen primitivas de sincronizaci√≥n m√°s all√° de lo que vimos en
    clase! El uso de =AtomicInteger= es my adecuado para el problema.
    - El uso de =HashSet= no es espec√≠ficamente de sincronizaci√≥n, pero se me
      hace una buena e ingeniosa manera de resolver la necesidad que plantean
    - Ojo: en ning√∫n momento especificamos que los elfos /no tengan que estar
      pide y pide/: mi l√≥gica dir√≠a que al terminar con un la construcci√≥n de un
      juguete, inician con la de otro. Pero bueno... no lo inclu√≠ en las
      especificaciones, y como les dije, son libres de interpretar e implementar
      üòâ
  - Es frecuente ver que alumnos (y programadores novatos) escriban los
    comentarios /a la derecha/ del c√≥digo al que se aplican. Esto, sin embargo,
    hace que el c√≥digo crezca demasiado en lo horizontal, y dificulta la
    lectura. Muchas l√≠neas como la siguiente resultan dif√≠ciles:
    #+begin_src java
      santaSemaforo.acquire();//Para que santa espere a ser despertado una vez que alguna de las condiciones se cumpla

      elfoMutex.acquire();//Mutex para protecci√≥n de la secci√≥n critica
      //Verificaci√≥n de las condiciones para el final del programa: Si todos los renos han regresado y si no hay m√°s elfos que necesiten ayuda
      if (renosRegresados.get() == NUM_RENOS && elfosEsperando.get() == 0 && !mensajeFinal){
    #+end_src
    - Est√°n comentando de m√°s (algunos de los comentarios son innecesarios,
      el comportamiento que describen resulta obvio, no √∫nicamente del contexto,
      sino que de lo que /ya fue comentado m√°s atr√°s/ (po ejemplo, ya sabemos
      que =elfoMutex= es un mutex para el contador de elfos, y que un mutex
      sirve para proteger secciones cr√≠ticas... /Sobre-comentar/ no facilita la
      lectura del c√≥digo, y hace m√°s lenta su escritura.
    - Pero incluso obviando esto, resulta mucho m√°s f√°cil de leer:
      #+begin_src java
	//Para que santa espere a ser despertado una vez que alguna de las condiciones
	//se cumpla
	santaSemaforo.acquire();

	//Mutex para protecci√≥n de la secci√≥n critica
	elfoMutex.acquire();
	//Verificaci√≥n de las condiciones para el final del programa: Si todos los renos
	//han regresado y si no hay m√°s elfos que necesiten ayuda
	if (renosRegresados.get() == NUM_RENOS && elfosEsperando.get() == 0 && !mensajeFinal){
      #+end_src
    - En mi experiencia, Santa Claus no limita su actividad a un s√≥lo a√±o. Una
      vez que entregamos los juguetes... ¬°Hay que volver a iniciar todo el
      ciclo! Desafortunadamente, en su implementaci√≥n, Santa no despuerta
      despu√©s de que =¬°es hora de repartir los regalos= ‚òπ
      - No es tan simple como rodear al =santa.start()= con un =while(true)= o
        algo por el estilo... ¬øTienen un bloqueo mutuo?
      - Recomendaci√≥n al dise√±ar sistemas basados en programaci√≥n orientada a
        objetos: al modelar el sistema, verifiquen /d√≥nde deben instanciarse/
        los distintos objetos. Creo que tendr√≠an que habe creado una clase
        separada para =Santa= (diferenci√°ndola del /problema de Santa Claus/,
        =SantaClausP=). Al no existir =Santa= como una entidad por derecho
        propio, independiente del problema en cuesti√≥n, le ‚Äúcae la
        responsabilidad‚Äù de ser √©l quien inicializa (l√≠neas 31‚Äì36) a renos y
        elfos. ¬øNo deber√≠an nacer m√°gicamente, de forma independiente a Santa?
- Calificaci√≥n :: 10

** Sebastian Gayosso y Erandy Perez
- Problema resuelto :: El elevador
- Documentaci√≥n :: [[./GayossoSebastian-PerezErandy/Tarea1_Instrucciones.pdf][Tarea1_Instrucciones.pdf]]
- Archivos :: [[./GayossoSebastian-PerezErandy/elevador.py][elevador.py]]
- Comentarios ::
  - Es una soluci√≥n interesante y /poco ortodoxa/, pero v√°lida
  - Es dif√≠cil seguir el desarrollo de tu implementaci√≥n, pues es demasiado /verbosa/
    - A cada paso del elevador, cada una de las personas informan respecto su
      estado completo
    - Incluso si el estado no cambi√≥ desde el reporte anterior: si el elevador
      pas√≥ del piso 4 al 3, la persona /n/ va a reportar que est√° en el piso 1
      queriendo llegar al 5. Y cuando el elevador pase del 3 al 2... ¬°va a
      reportar exactamente lo mismo
    - Es conveniente reportar el avance /√∫nicamente cuando hay cambios de estado/.
  - Te recomiendo considerar para tus dise√±os futuros una mejor /separaci√≥n de
    responsabilidades/: en tu c√≥digo, la funci√≥n =mover_elevador()= se encarga
    de meter y sacar a las personas, y =persona()= √∫nicamente las mete al
    elevador y va reportando el estado.
    - Claro, tendr√≠as que realizar m√°s sincronizaci√≥n (/Se√±alizaci√≥n/, por
      ejemplo, entre el elevador y cada una de las personas). Pero tu c√≥digo
      resultante quedar√≠a m√°s limpiio y comprensible.
- Calificaci√≥n :: 8

** Andrea Anikey Gomez e Ian Yael Leon
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./GomezGuzman-LeonGallardo/README.txt][README.txt]]
- Archivos :: [[./GomezGuzman-LeonGallardo/alumnos_y_asesor.py][alumnos_y_asesor.py]]
- Comentarios ::
  - Muy bueno que hayan /personalizado/ el reporte, usando nombres de personas
    en vez de un fr√≠o =alumno 1=, =alumno 2=, ...
  - Modelaron a los cinco =Alumnos= y las sillas, pero no considera la
    interacci√≥n con el =Profesor=
    - Al iniciar el sistema, el profesor entra al aula e inicia su
      descanso. Despu√©s, parecer√≠√° que responde a las preguntas, pero (l√≠nea 42)
      es en realidad un hilo de alumnos el que dice que =El profesor est√°
      respondiendo....=
    - Como est√° planteado, no puede decirse que el profesor se duerma cuando no
      hay alumnos y despierte cuando llegan ‚Äî ni expl√≠cita ni impl√≠citamente ‚òπ
- Calificaci√≥n :: 7.5

** Emilio Gonzalez y Dayna Suarez
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./GonzalezEmilio-SuarezDayna/Tarea1_GonzalezEmilio-SuarezDayna.pdf][Tarea1_GonzalezEmilio-SuarezDayna.pdf]]
- Archivos :: [[./GonzalezEmilio-SuarezDayna/Tarea1_GonzalezEmilio-SuarezDayna.py][Tarea1_GonzalezEmilio-SuarezDayna.py]], [[./GonzalezEmilio-SuarezDayna/Tarea1_GonzalezEmilio-SuarezDayna.zip][Tarea1_GonzalezEmilio-SuarezDayna.zip]]
- Comentarios ::
  - La entrega incluye un archivo =Zip= que... incluye al mismo c√≥digo que
    entregaron. ¬øPara qu√©? üòâ
  - ¬°Me parece excelente que descubrieran ese /uso mixto/ de la sem√°ntica de
    sem√°foros! Esta funci√≥n me tom√≥ por sorpresa (¬°yo nunca hab√≠a usado
    =blocking= con sem√°foros!)
    #+begin_src python
      def accion_santa(self):
          # Santa debe ayudar a los elfos o repartir regalos sin secuencias
          mutex.acquire()

          # Despertar basado en cu√°l sem√°foro se libera primero
          if renos_listos.acquire(blocking=False):
              self.repartir_regalos()  # Reparte regalos cuando los 9 renos est√©n listos
          elif elfos_listos.acquire(blocking=False):
              self.ayudar_elfos()  # Ayuda a los 3 elfos cuando est√°n listos

          mutex.release()
    #+end_src
    - ¬°Ojo! El uso que ustedes dan es bueno. Sin embargo, ser√≠a f√°cil abusar de
      esto convirti√©ndolo en una maleducada y horrible espera activa:
      #+begin_src python
	def no_hacer_asi(self):
	    while not semaf.acquire(blocking=True):
	        pass
	    print('¬°Ya lo tengo!')
      #+end_src

  - Hay un problema con la l√≥gica de los renos: Si bien el primer a√±o =Santa=
    espera a los 9 renos, inmediatamente despu√©s vemos que las cosas se
    descontrolan: cinco elfos piden ayuda y no la reciben, y Santa comienza a
    hacer viajes por el mundo solito y sin renos üò∞
    #+begin_src text
      (...)
      Reno 4: ¬°He vuelto de vacaciones! üå¥
      Reno 5: ¬°He vuelto de vacaciones! üå¥
      Reno 8: ¬°He vuelto de vacaciones! üå¥
      Santa: ¬°Todos los renos est√°n de vuelta, es hora de repartir regalos! ü¶åüéÅ
      Santa: ¬°Repart√≠ todos los regalos, ahora a dormir! üò¥
      Elfo 2: ¬°Tengo un problema con los juguetes! üß∏
      Elfo 21: ¬°Tengo un problema con los juguetes! üß∏
      Elfo 4: ¬°Tengo un problema con los juguetes! üß∏
      Elfo 1: ¬°Tengo un problema con los juguetes! üß∏
      Elfo 13: ¬°Tengo un problema con los juguetes! üß∏
      Santa: üí§ Durmiendo...
      Santa: üéÖ Despert√©!
      Santa: ¬°Todos los renos est√°n de vuelta, es hora de repartir regalos! ü¶åüéÅ
      Santa: ¬°Repart√≠ todos los regalos, ahora a dormir! üò¥
      Santa: üí§ Durmiendo...
      Santa: üéÖ Despert√©!
      Santa: ¬°Todos los renos est√°n de vuelta, es hora de repartir regalos! ü¶åüéÅ
      Santa: ¬°Repart√≠ todos los regalos, ahora a dormir! üò¥
      Santa: üí§ Durmiendo...
      Santa: üéÖ Despert√©!
      Santa: ¬°Todos los renos est√°n de vuelta, es hora de repartir regalos! ü¶åüéÅ
    #+end_src
    - de hecho, busc√°ndole un poco... Lo mismo pasa con los =Elfo=: despu√©s de
      que =Santa= despierta por los primeros tres, no vuelve a hacerlo:
      #+begin_src text
	Santa: üí§ Durmiendo...
	Elfo 1: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 11: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 22: ¬°Tengo un problema con los juguetes! üß∏
	Santa: üéÖ Despert√©!
	Elfo 14: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 20: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 25: ¬°Tengo un problema con los juguetes! üß∏
	Santa: ¬°Tres elfos tienen problemas, voy a ayudar! üßù‚Äç‚ôÇÔ∏èüéÑ
	Elfo 1: ¬°Gracias Santa por la ayuda! üéÑ
	Elfo 11: ¬°Gracias Santa por la ayuda! üéÑ
	Elfo 22: ¬°Gracias Santa por la ayuda! üéÑ
	Elfo 3: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 4: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 7: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 8: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 10: ¬°Tengo un problema con los juguetes! üß∏
	Elfo 17: ¬°Tengo un problema con los juguetes! üß∏
	(...)
      #+end_src
    - ¬øpor qu√© ocurre esto? Me parece que esperas una vez por la barrera, pero
      una vez que pasan, no vuelven a levantarla (=elfosBarrera.reset()=).
    - Veo que, a diferencia de =Santa= y de =Elfo=, =Reno= no vive dentro de un
      =while True=. por tal raz√≥n, la segunda vacaci√≥n que se toman los
      renos... es una vacaci√≥n eterna.
- Calificaci√≥n :: 8.5

** Pablo Gonzalez y Shareny Lechuga
- Problema resuelto :: Los alumnos y el asesor
- Documentaci√≥n :: [[./GonzalezPablo-LechugaShareny/Tarea01_Sincronizacion.pdf][Tarea01_Sincronizacion.pdf]]
- Archivos :: [[./GonzalezPablo-LechugaShareny/alumnos_y_asesor.py][alumnos_y_asesor.py]]
- Comentarios ::
  - ¬°Muy bien por usar =Event=, que no vimos en clase, para controlar el estado
    (despierto/dormido) del =profesor()=
    - Pero falta una manera en que =estudiante()= y =profesor()= se comuniquen
      cu√°ndo uno hace preguntas y cu√°ndo el otro responde, alg√∫n mecanismo como
      una notificaci√≥n. Sin ello, pasa lo siguiente:
      #+begin_src text
	(...)
	Estudiante 4 llega al cub√≠culo.
	El profesor est√° despierto y atendiendo a los estudiantes.
	Estudiante 0 hace la pregunta 2.
	El profesor est√° durmiendo...
	El estudiante 0 ha terminado de preguntar.
	El estudiante 0 deja la silla y se va.
	El estudiante 3 se sienta y espera su turno.
	El estudiante 1 pregunta al profesor.
	(...)
      #+end_src
    - Tal vez no ten√≠a suficiente caf√© disponible o algo por el estilo... ¬°pero
      el grosero del =profesor()= no espera ni siquiera a que el =estudiante(0)=
      haga su pregunta, y ya se fue a dormir!
  - No hay una interacci√≥n real entre el estudiante y el profesor: Tendr√≠a que
    presentarse un paso de mensajes entre que =Estudiante {id_estudiante} hace
    la pregunta {i+1}= y que el profesor la responde... Claro, ¬°lo que pasa es
    que el profesor no tiene la l√≥gica para responder a las preguntas! üôÅ
- Calificaci√≥n :: 8

** Daniel Hernandez
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./HernandezDaniel/GUI1.png][GUI1.png]], [[./HernandezDaniel/Readme.md][Readme.md]], [[./HernandezDaniel/elfo.png][elfo.png]], [[./HernandezDaniel/reno.png][reno.png]], [[./HernandezDaniel/saco.png][saco.png]], [[./HernandezDaniel/santa_awake.png][santa_awake.png]], [[./HernandezDaniel/santa_renos.png][santa_renos.png]], [[./HernandezDaniel/santa_sleeping.png][santa_sleeping.png]]
- Archivos :: [[./HernandezDaniel/Santa.py][Santa.py]]
- Comentarios ::
  - ¬°Muy bonita representaci√≥n! Cuenta con una sencilla interfaz gr√°fica
    mostrando el estado actual del ‚Äúmundo‚Äù, y podemos ver en consola el
    historial de eventos.
  - ¬°Muy bien por probar la implementaci√≥n con variables de condici√≥n! üòÉ
  - Es frecuente ver que alumnos (y programadores novatos) escriban los
    comentarios /a la derecha/ del c√≥digo al que se aplican. Esto, sin embargo,
    hace que el c√≥digo crezca demasiado en lo horizontal, y dificulta la
    lectura. Muchas l√≠neas como las siguientes resultan dif√≠ciles:
    #+begin_src python
      elfo_counter_label.config(text=str(ElfosEnProblemas)) #Actualizamos la GUI
      MutexElfos.release() #Liberamos el mutex para que puedan seguir habiendo elfos identificandose "Con problemas"
      MutexElfos2.acquire() #Tomamos el mutex para que solo un elfo avise que si ya hay 3 en problemas o que se quede a la espera
    #+end_src
    - Est√°n comentando de m√°s (algunos de los comentarios son innecesarios, el
      comportamiento que describen resulta obvio, no √∫nicamente del contexto,
      sino que de lo que /ya fue comentado m√°s atr√°s/... /Sobre-comentar/ no
      facilita la lectura del c√≥digo, y hace m√°s lenta su escritura.
    - Pero incluso obviando esto, resulta mucho m√°s f√°cil de leer:
      #+begin_src python
	# Actualizamos la GUI
	elfo_counter_label.config(text=str(ElfosEnProblemas)) 
	# Liberamos el mutex para que puedan seguir habiendo elfos identificandose "Con
	# problemas"
	MutexElfos.release() 
	# Tomamos el mutex para que solo un elfo avise que si ya hay 3 en problemas o
	# que se quede a la espera
	MutexElfos2.acquire()
      #+end_src
    - M√°s a√∫n cuando explicas como parte de tu c√≥digo, como el comentario en
      bloque entre las l√≠neas 80 y 86. Resultar√≠a mucho m√°s f√°cil de leer en mi
      opini√≥n si no ‚Äúgastara‚Äù 34 caracteres en blanco por la izquierda, y si por
      la derecha se alineara por lo menos al caracter 80.
    - Respecto a la duda que planeteas: Estoy de acuerdo contigo. Cuando =Santa=
      llama a =self.__duerme__()= lo hace mediante =SantaVC.wait()=, y tal como
      lo dices, lo que implementaste es que Santa se despierte y verifique su
      entorno. No est√°s gastando recursos ni actuando hostilmente.
- Calificaci√≥n :: 10

** Hector Hernandez
- Problema resuelto :: El cruce del r√≠o
- Documentaci√≥n :: [[./HernandezHector/Tarea 1_SO.pdf][Tarea 1_SO.pdf]], [[./HernandezHector/readme.md][readme.md]]
- Archivos :: [[./HernandezHector/Tarea1.py][Tarea1.py]]
- Comentarios ::
  - Tu archivo [[./readme.md][readme.md]] resulta innecesario üòâ Cuando ya no requieras de un
    archivo en Git, recuerda borrarlo.
  - ¬°Buena implementaci√≥n! Creo que es la primera vez que veo que alguien
    implementa este problema /permitiendo/ balsas mal organizadas pero
    bloqueando sus viajes.
  - ¬°El congreso tiene un √≠ndice de admisi√≥n muy bajo! Si por cada =Balsa()= que
    se crea est√°s creando a 5 =hackers= y 5 =serfs=, s√≥lo 4 de ellos pueden
    subir a la balsa, y a veces la balsa se niega a funcionar... ¬°vas a tener un
    verdadero movimiento de rechazados de este lado del r√≠o! üòâ
- Calificaci√≥n :: 10

** Josue Jimenez y Santiago Medina
- Problema resuelto :: Intersecci√≥n de caminos
- Documentaci√≥n :: [[./JimenezJosue-MedinaSantiago/Jim√©nezJosu√©_MedinaSantiago_Tarea01.pdf][Jim√©nezJosu√©_MedinaSantiago_Tarea01.pdf]]
- Archivos :: [[./JimenezJosue-MedinaSantiago/Jim√©nezJosu√©_MedinaSantiago_Tarea01.py][Jim√©nezJosu√©_MedinaSantiago_Tarea01.py]]
- Comentarios ::
  -
    #+begin_src python
      while 25346798052 == 25346798052: #üëª
    #+end_src
    ... ¬°As√∫stame pante√≥n! üòâ
  - Buena implementaci√≥n üôÇ Sencilla y sin mucho que agregar.
- Calificaci√≥n :: 10

** Aaron Leon
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./LeonAaron/LeonPerezAaronRodrigo-Tarea1SO.pdf][LeonPerezAaronRodrigo-Tarea1SO.pdf]]
- Archivos :: [[./LeonAaron/PreparativosNavidad.py][PreparativosNavidad.py]]
- Comentarios ::
  - ¬°Bonito arte ASCII, y un muy buen detalle el manejo de nombres y frases
    alegres por parte de los /participantes/ de la simulaci√≥n!
  - Buena implementaci√≥n con variables de condici√≥n. ¬°Muy bien! üòÉ
- Calificaci√≥n :: 10

** Darwin Luna
- Problema resuelto :: El servidor Web
- Documentaci√≥n :: [[./LunaDarwin/LunaDarwin_T1_Documento.pdf][LunaDarwin_T1_Documento.pdf]]
- Archivos :: [[./LunaDarwin/LunaDarwin_T1_Codigo.py][LunaDarwin_T1_Codigo.py]]
- Comentarios ::
  - Entregado fuera del directorio indicado por nuestros est√°ndares de
    nomenclatura. *-1* punto üôÅ
  - ¬°Excelente presentaci√≥n de la documentaci√≥n!
    - Y agradezco que me indiques / aceptes que no lograste resolver el
      problema. ¬°Veamos si puedo hacer algo por ayudar a tu programa! üòÉ
  - Me parece que el principal problema es tu manejo de la cola de eventos,
    =new_task_event=, que es una instancia de =threading.Event()=
    - El trabajador /obtiene/ los eventos de esta cola utilizando
      =new_task_event.wait()= (l√≠nea 36). Nunca utilic√© esta primitiva, pero
      supongo que hay que aplicarle un =.clear()=, para evitar que siga pasando
      cuando ya no tiene un evento por atender
  - El manejo de la cola (=queue.Queue=) =task_queue= es incorrecto: En tu l√≠nea
    36 llamas a =task_queue.get_nowait()=. Eso lleva a que una y otra vez falle
    con =queue.Empty=, y tu sincronizaci√≥n se convierte en una espera activa.
    - Basta cambiar esa l√≠nea por un =task_queue.get()= y, como se queda a la
      espera de que llegue un evento, puede avanzar y completar exitosamente:
      #+begin_src text
	$ python3 ./LunaDarwin/LunaDarwin_T1_Codigo.py
	Ingrese el n√∫mero total de tareas a procesar: 3
	Jefe: Nueva solicitud recibida, asignando tarea 1
	Trabajador 2 atendiendo solicitud: Tarea-1
	Jefe: Nueva solicitud recibida, asignando tarea 2
	Trabajador 1 atendiendo solicitud: Tarea-2
	Trabajador 2 complet√≥ solicitud: Tarea-1
	Jefe: Nueva solicitud recibida, asignando tarea 3
	Trabajador 0 atendiendo solicitud: Tarea-3
	Trabajador 1 complet√≥ solicitud: Tarea-2
	Trabajador 0 complet√≥ solicitud: Tarea-3
	Jefe: Todas las tareas han sido completadas. Finalizando el programa.
      #+end_src
- Calificaci√≥n :: 8 - 1 = 7

** Enrique Medrano
- Problema resuelto :: El servidor Web
- Documentaci√≥n :: [[./MedranoEnrique/MedranoEnrique_Tarea1.txt][MedranoEnrique_Tarea1.txt]]
- Archivos :: [[./MedranoEnrique/MedranoEnrique_Tarea1.py][MedranoEnrique_Tarea1.py]]
- Comentarios ::
  - ¬°Excelente que atrapes el =KeyboardInterrupt= y tengas condiciones
    determinadas para poder finalizar limpiamente la
    ejecuci√≥n! üòÉ
  - Muy bien por el uso de =Queue=, que no lo vimos como tal en clase.
  - No ser√≠a dif√≠cil implementar el punto que mencionas, de llevar contabilidad
    del tiempo transcurrido para cada hilo: Con tener un arreglo compartido (y
    un mutex que lo proteja), cada hilo trabajador podr√≠a sumar el total de
    tiempo que trabaj√≥ (o el total de veces que ha sido llamado, o lo que gustes
    üòâ) antes de reiniciar el ciclo =while=.
  - Como √∫nico pero, veo que el jefe va entregando las tareas a los
    trabajadores, pero estos no hacen ning√∫n tipo de notificaci√≥n de vuelta al
    jefe. Tendr√≠an que hacerlo, de manera que el jefe pudiera lanzar hilos de
    reserva si demasiados est√°n ocupados.
- Calificaci√≥n :: 9

** Yuichi Miyasaki
- Problema resuelto :: El cruce del r√≠o
- Documentaci√≥n :: [[./MiyasakiYuichi/MiyasakiYuichi_Tarea1_Reporte.pdf][MiyasakiYuichi_Tarea1_Reporte.pdf]]
- Archivos :: [[./MiyasakiYuichi/MiyasakiYuichi_Tarea1.exe][MiyasakiYuichi_Tarea1.exe]], [[./MiyasakiYuichi/MiyasakiYuichi_Tarea1.py][MiyasakiYuichi_Tarea1.py]]
- Comentarios ::
  - Tu entrega incluye el c√≥digo en python, y tambi√©n incluye dicho c√≥digo
    convertido en ejecutable de Windows.
    - Debes evitar incluir ejecutables como parte de un dep√≥sito Git, a menos
      que tengas una /muy buena y particular raz√≥n/ para incluirlos (¬ørecuerdas
      la [[../../practicas/4/README.md][pr√°ctica 4]]?)
    - Python es un lenguaje en que t√≠picamente los programas se distribuyen en
      fuente (hasta para su ejecuci√≥n para el usuario final), dada la eficiencia
      de su compilador.
  - Al ejecutar el c√≥digo tal como lo enviaste, primero se forman 8 balsas con
    √∫nicamente serfs, despu√©s 8 balsas con √∫nicamente hackers,
    despu√©s... ¬°Sorprendentemente, a la 6¬™ balsa de esta tercer serie comienzan
    a alternarse. Y a veces se alternan... pero la cantidad de balsas homog√©neas
    es alarmantemente alta üòê
  - ¬°Me parece muy interesante lo que explicas en tus secciones 4 y 5 respecto a
    la /resoluci√≥n de conflictos/! Veamos el c√≥digo...
  - En tu =main()= defines a =total_hackers= y a =total_serfs= como 15, pero
    esto no limita al n√∫mero de =Personas= que tendremos: la =Balsa= se mantiene
    cruzando gente para siempre.
    - =Persona().run()= se mantiene eternamente llamando a
      =self.balsa.subir(self)=, esto es, nunca se da por satisfecho de llegar al
      otro lado.
  - ¬°Muy bien! que representes a =Hacker= y =Serf= como clases derivadas de
    =Persona=! en realidad, para la mayor parte de la l√≥gica, tienes toda la
    raz√≥n: no hace mayor diferencia (...excepto cuando s√≠ üòâ)
- Calificaci√≥n :: 9

** Ximena Ortiz y Jennyfer Sanchez
- Problema resuelto :: El elevador
- Documentaci√≥n :: [[./OrtizXimena-SanchezJennyfer/Reporte.txt][Reporte.txt]]
- Archivos :: [[./OrtizXimena-SanchezJennyfer/elevador.py][elevador.py]]
- Comentarios ::
  - ¬°Muy bien por usar variables de condici√≥n para notificar a los pasajeros que
    est√°n esperando en cada piso!
    - Sin embargo, los pasajeros no /suben/ al elevador, sino que /son subidos/
      por √©ste, sin emplear realmente construcciones de sincronizaci√≥n:
      #+begin_src python
	pasajeros_a_subir = solicitudes_pisos[piso_actual]
	i = 0
	while i < len(pasajeros_a_subir) and len(pasajeros_en_elevador) < CAPACIDAD_ELEVADOR:
	    pasajero = pasajeros_a_subir[i]
	    imprimir_mensaje(f"{pasajero} aborda el elevador en el piso {piso_actual}")
      #+end_src
- Calificaci√≥n :: 8.5

** Santiago Pali
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./PaliSantiago/PaliSantiago_Tarea1.pdf][PaliSantiago_Tarea1.pdf]]
- Archivos :: [[./PaliSantiago/PaliSantiago_Tarea1.py][PaliSantiago_Tarea1.py]]
- Comentarios ::
  - Implementaci√≥n sencilla y correcta
  - La interfaz es s√≥lo una bit√°cora de texto. Sin embargo, por el manejo del
    color e indicaciones, resulta muy claro seguir la ejecuci√≥n.
- Calificaci√≥n :: 10

** Luis Perez y Claudio Flores
- Problema resuelto :: Santa Claus
- Documentaci√≥n :: [[./PerezLuis-FloresCalaudio/reporte.pdf][reporte.pdf]]
- Archivos :: [[./PerezLuis-FloresCalaudio/santa.py][santa.py]]
- Comentarios ::
  - Implementaste una muy buena estructura para tu =SantaWorkshop=. ¬°Muy bien!
  - Si bien la manera en que manejas el l√≠mite solicitado tanto de elfos como de
    renos funciona correctamente:
    #+begin_src python
      if len(self.elfos_esperando) < 3:
	  print(f"üßù Elfo {id} necesita ayuda")
	  self.elfos_esperando.append(threading.current_thread())

	  if len(self.elfos_esperando) == 3:
	      print("üë• Grupo de 3 elfos formado, despertando a Santa")
	      self.santa_sleep.release()
    #+end_src
    ser√≠a m√°s limpio (y tal vez hasta m√°s f√°cil) hacer que elfos y renos
    adquirieran una barrera (=Barrier=).
- Calificaci√≥n :: 9

** Jesus Tenorio
- Problema resuelto :: El asesor y los alumnos
- Documentaci√≥n :: [[./TenorioJesus/ExplicacionCodigo.pdf][ExplicacionCodigo.pdf]]
- Archivos :: [[./TenorioJesus/AsesorAlumnos.c][AsesorAlumnos.c]]
- Comentarios ::
  - ¬°Muy bien! Una entrega en C y usando OpenMP! Eso es absolutamente nuevo para
    mi... ¬°A ver! üòÉ
    - Ojo: No indicaste en tu explicaci√≥n /c√≥mo compilarlo/. Y por seguir las
      primeras instrucciones que me encontr√©, casi te va mal:
      #+begin_src shell
	$ gcc  AsesorAlumnos.c -lgomp -oAsesorAlumnos
	$ ./AsesorAlumnos

	Ingrese la cantidad de alumnos que iran con Gunnar: 	5

	 Hay alumnos con Dudas, Gunnar despierta
	Gunnar esta atendiendo la Duda del alumno 1
	Ya casi acaba....
	Termindado El alumno se retira


	Al parecer ya no hay mas alumnos, Gunnar procede a dormir
      #+end_src
    - Claro... Le√≠ un poco m√°s, y encontr√© que hab√≠a que compilar con
      =-fopenmp=, no con =-lgomp=...
  - Me parece muy interesante la manera en que OpenMP modela la interacci√≥n, y
    en c√≥mo funcionan sus declaraciones.
  - En tu programa, los alumnos llegan todos ‚Äúen bola‚Äù desde el inicio de la
    ejecuci√≥n, y van siendo ‚Äúdespachados‚Äù en grupos de a tres.
    - El planteamiento dice que /‚Äúlos alumnos pueden tocar a su puerta en
      cualquier momento‚Äù/
    - En tu implementaci√≥n, cada alumno hace una √∫nica pregunta. En el
      planteamiento dice que /‚Äúcada alumno puede preguntar desde 1 y hasta y
      preguntas (permitiendo que los dem√°s alumnos pregunten entre una y otra)‚Äù/
    - Los alumnos cuyas preguntas ya se respondieron se retiran, pero sus sillas
      se mantienen /falsamente ocupadas/ hasta que salga la triada completa. En
      el planteamiento del problema, cuando sale un alumno, otro que est√©
      esperando puede tomar su silla.
    - Todos los hilos de tu programa son alumnos, el profesor es s√≥lo un
      /concepto/, completamente pasivo. Este problema normalmente presenta
      interacci√≥n entre hilos, haciendo que unos pregunten y el otro responda.
  - Faltaron varios de los puntos solicitados. ¬°Pero me parece muy bueno que nos
    ense√±es c√≥mo casi-resolver este problema de una manera tan distinta!
- Calificaci√≥n :: 8

** H√©ctor Guerrero y Joel L√≥pez
- Problema resuelto :: El cruce del r√≠o
- Documentaci√≥n :: [[./GuerreroH√©ctor_L√≥pezJoel/TAREA_01_GuerreroH√©ctor_L√≥pezJoel.pdf][TAREA_01_GuerreroH√©ctor_L√≥pezJoel.pdf]]
- Archivos :: [[./GuerreroH√©ctor_L√≥pezJoel/GuerreroH√©ctor_L√≥pezJoel.py][GuerreroH√©ctor_L√≥pezJoel.py]]
- Comentarios ::
  - Entrega extempor√°nea. Calificaci√≥n m√°xima, 75%.
  - Recomendaci√≥n para su c√≥digo al futuro: El principio *DRY*: /Don't Repeat
    Yourself/. No te repitas.

    Cuando tienen funciones como =serf()= y =hacker()=, que son pr√°cticamente
    id√©nticas a excepci√≥n del valor de uno de los argumentos que maneja (en este
    caso, imprimir o indicar =Serf= o =Hacker=), conviene abstraerla a una √∫nica
    funci√≥n que implemente la funcionalidad, y convertirlo en un par√°metro.

    ¬øQue por qu√©? Piensen no en un ejercicio de tarea, sino que en un sistema
    que van a mantener a futuro, en su vida profesional. Si a este sistema
    tienen que darle mantenimiento, y hay que agregar o ‚Äúafinar‚Äù el
    comportamiento en esta funci√≥n, hay que mantenerlo coherente. Es m√°s f√°cil
    no crear repetici√≥n desde el principio, y convertirlo en una costumbre.
  - Muy buena interfaz que hicieron para presentar el cruce del r√≠o, separando
    el listado de eventos seg√∫n el actor al cual hacen referencia.
  - El planteamiento del problema, sin embargo, no fue atendido üôÅ
    - En vez de preparar un cruce /balanceado/ por el usuario, el chiste de este
      problema consiste en que van llegando hilos de diferentes naturalezas, y
      hay que /acomodarlos/ dependiendo de su categor√≠a sin que haya
      coordinaci√≥n entre ellos.
- Calificaci√≥n :: 8 √ó 7.5 = 6.0
