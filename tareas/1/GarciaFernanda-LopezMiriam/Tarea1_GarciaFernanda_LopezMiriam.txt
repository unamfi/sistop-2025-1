Universidad Nacional Autonoma de Mexico     
Facultad de Ingeniería 
Sistemas Operativos 
Equipo: García Ortega Fernanda, López Hernández Miriam Amisadai 
Tarea 1: Ejercicios de sincronización 




El problema que decidimos desarrollar como equipo es el de  de Santa Claus, ya que nos llamó la atención el cómo sería programarlo, además de que al momento de tener la discusión sobre la mejor opción a llevar cabo, tuvimos más ideas sobre cómo resolver el este problema con los recursos que tenemos de nuestros antecedentes con respecto a la programación y con lo mencionado en la clase de Sistemas Operativos. 
Podemos decir que  fue muy interesante llevar a cabo la solución de este problema ya que no solo ocupamos muchos elementos que ya conocíamos sino que ampliamos nuestro conocimiento sobre, en nuestro caso, el lenguaje Java ya que este fue de nuestra preferencia para desarrollar la tarea. Para decidirnos sobre el lenguaje, llegamos al acuerdo de que, ya que en nuestras clases pasadas de Programación Orientada a Objetos , se hizo uso de este lenguaje para la mayor parte de desarrollo de tanto de prácticas, como de tareas y proyectos, teníamos más bases sobre Java para poder resolver la tarea relacionándola con lo visto en este semestre, es decir, con hilos, sincronización e incluso los semáforos. 
El lenguaje y entorno que lo desarrollamos fue en java. Lo que necesitamos hacer para ejecutar el programa es instalar Java Development Kit(JDK), que es un paquete que incluye el compilador de Java (javac), la Máquina Virtual y otras herramientas, esto se puede descargar desde la página oficial de Oracle o utilizar una distribución alternativa como OpenJDK. Se debe configurar la variable de entorno JAVA_HOME para que apunte al directorio donde se ha instalado el JDK. Después se debe configurar la variable de entorno PATH, es decir, se agrega la ruta del directorio bin del JDK, por ejemplo, ya que nosotras manejamos Windows, al momento de hacer este paso, tuvimos que poner una instrucción parecida a la siguiente: C:Program Files\Java\jdk-XX\bin , de esta manera ya es posible ejecutar comandos de Java desde cualquier lugar en la línea de comandos. 
Aunado a lo anterior, ya que quisimos darle un poco de estética a nuestra tarea, decidimos poner colores en la salida del programa, por lo que, para asegurarnos de que nuestra cmd reconociera o aceptara las instrucciones que hacen referencia a los colores, colocamos la siguiente instrucción: reg add HKCU\Console /f /v VirtualTerminalLevel /t REG_DWORD /d 1. Para ejecutar el programa como tal, se debe elegir un editor de textos de su preferencia, guardar el programa, que en nuestro caso sería como ‘SantaClausP.java’ y en la terminal se deben poner las siguientes instrucciones: 
 javac SantaClausP.java 
java SantaClaus
De esta manera no habrá ningún problema al ejecutar el programa y analizar la solución que se le dio. 
Nuestro programa utiliza concurrencia y sincronización para poder coordinar la interacción entre los hilos de Elfos, Renos y Santa Claus. Los mecanismos que se utilizaron fueron los siguientes: 
Semáforos: Estos controlan la concurrencia en nuestro programa, bloqueando o permitiendo que un hilo continúe en función de la disponibilidad. 
elfosMutex y renosMutex: son mutuos que protegen las secciones críticas, estas aseguran que solo un hilo acceda a los contadores de elfos y renos al mismo tiempo. 


Atomiclnteger: elfosEsperando y renosRegresados son contadores seguros que usamos para los entornos multihilo para no tener que hacer una sincronización manual 


Bloqueo y liberación por grupos: Se utiliza un semáforo para bloquear a los elfos hasta que todos sean atendidos, así liberándose al final. También, Santa inicia su recorrido final solo cuando todos los renos han regresado de sus vacaciones y ya no haya elfos esperando ayuda
El patrón de sincronización que utilizamos fue de tipo productor-consumidor, donde los elfos y los renos actúan como productores, mientras Santa actúa como consumidor
Aplicamos refinamientos, usamos los Mutex, estos nos ayudaron a evitar problemas donde múltiples hilos intentan modificar las mismas variables simultáneamente. 
Usamos un control de grupos de elfos, para que solo 3 elfos atienda Santa, cuando estos necesiten ayuda. Utilizamos una variable para el recorrido final de Santa, donde utilizamos un refinamiento de comportamiento multihilo 
Y por último utilizamos un refinamiento donde se asegura que los elfos solo piden ayuda una sola vez, así evitando que el programa entre en un posible bucle, donde los elfos estén pide y pide ayuda. (HashSet)
También utilizamos algunas mejoras en el programa, como la implementación del uso de colores, implementamos esta mejora para que la legibilidad fuera mejor y así hacer más clara la salida del programa. Usamos también AtomicInteger para evitar la necesidad de bloqueos adicionales. Sin embargo, creemos que aún hay algunos problemas en nuestra salida del programa, debido a que ya que el problema deja algunas instrucciones para que las interpretemos personalmente, como tal no logramos obtener la salida que en un inicio nos habíamos planteado, sin embargo, consideramos que lo demás se encuentra bien desarrollado, con ideas que surgieron de ambas partes del equipo y con nuevos elementos que tuvimos que investigar para poder implementar correctamente. Un ejemplo de nuestra salida se muestra a continuación: